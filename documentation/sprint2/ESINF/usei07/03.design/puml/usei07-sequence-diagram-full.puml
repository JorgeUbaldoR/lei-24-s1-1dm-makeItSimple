@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

'hide footbox
actor "Plant Floor Manager" as ADM
participant ":SimulatorUI" as UI
participant ":SimulatorController" as CTRL
participant ":Repositories" as RepositorySingleton
participant "repositories\n:Repositories" as PLAT
participant "simulator\n:Simulator" as SIMUL
participant "machineRepository \n: MachineRepository" as MACHREP
participant "machineList \n : ArrayList<Machine>" as MACHLIST
participant "machine \n: Machine" as MACH
participant "itemRepository \n: ItemRepository" as ITMREP
participant "operationRepository \n: OperationRepository" as OPREP
participant "machinesMap \n: Map<Operation, Queue<Machine>>" as MACHMAP
participant "operationQueue\n: OperationQueue" as OPQUE
participant "itemList\n : PriorityQueue<Item>" as ITMLIST
participant "operationQueueList\n: List<OperationQueue>" as OPQULIST
participant "item\n: Item" as ITEM

activate ADM

        ADM -> UI : asks to create a new task

        activate UI

'            UI --> ADM : requests data (reference, description,  informal \n description, technical description, duration, cost)
            'create CTRL
            UI -> CTRL** : create

            activate CTRL

                CTRL -> RepositorySingleton : getInstance()
                activate RepositorySingleton

                    RepositorySingleton --> CTRL: repositories
                deactivate RepositorySingleton

                |||
                CTRL -> PLAT : getItemRepository()
                activate PLAT

                PLAT --> CTRL: itemRepository
                deactivate PLAT

                |||
                CTRL -> PLAT : getMachineRepository()
                activate PLAT

                    PLAT --> CTRL: machineRepository
                deactivate PLAT
                |||

                CTRL -> PLAT : getOperationRepository()
                activate PLAT

                PLAT --> CTRL: operationRepository
                deactivate PLAT

            deactivate CTRL

            UI --> ADM : shows types of simulator and asks to select one
        deactivate UI

    ADM -> UI : select simulator without priority
    activate UI

        UI -> CTRL : startSimulationWithOutPriority()
        activate CTRL

            CTRL -> CTRL : getMachinesMap()
            activate CTRL

                CTRL -> MACHMAP** : create
                CTRL -> MACHREP : getMachineList()
                activate MACHREP

                    MACHREP --> CTRL : machineList
                deactivate MACHREP

                |||

                loop for each machine in the machineList
                    CTRL -> MACHLIST : getMachine()
                    activate MACHLIST

                    MACHLIST --> CTRL : machine
                    deactivate MACHLIST
                    CTRL -> MACH : getOperation()
                    activate MACH

                    MACH --> CTRL : operation
                    deactivate MACH

                    CTRL -> MACHMAP : add(operation,machine)
                    activate MACHMAP

                    MACHMAP --> CTRL : result
                    deactivate MACHMAP


                end
                CTRL --> CTRL: machinesMap
            deactivate CTRL

            |||
            CTRL -> CTRL : getItemList()
            activate CTRL

                CTRL -> ITMREP : getItemList()
                activate ITMREP

                    ITMREP --> CTRL : itemList
                deactivate ITMREP
                CTRL --> CTRL: itemList
            deactivate CTRL

            |||

            CTRL -> CTRL : getOperationList()
            activate CTRL

                CTRL -> OPREP : getOperationList()
                activate OPREP

                    OPREP --> CTRL : operationList
                deactivate OPREP
                CTRL --> CTRL: operationList
            deactivate CTRL

            |||
            CTRL -> SIMUL** : create(machinesMap,itemList,operationList,false)
            activate SIMUL

                SIMUL -> OPQULIST** : create
                activate OPQULIST

                OPQULIST --> SIMUL : operationQueueList
                deactivate OPQULIST

                SIMUL --> SIMUL : addOperationToQueue(operationList,false)
                    activate SIMUL
                        loop for each operation in the operationList
                            SIMUL -> OPQUE** : create(operation,false)
                            activate OPQUE

                                OPQUE -> ITMLIST** : create
                                OPQUE --> SIMUL : operationQueue
                            deactivate OPQUE


                            SIMUL -> OPQULIST : add(operationQueue)
                            activate OPQULIST

                            OPQULIST --> SIMUL : result
                            deactivate OPQULIST
                        end
                    deactivate SIMUL

                SIMUL -> SIMUL : createQueues(items)
                activate SIMUL

                    loop for each operationQueue in the operationQueueList
                        SIMUL -> OPQULIST : getOperationQueue()
                        activate OPQULIST

                            OPQULIST --> SIMUL : operationQueue
                        deactivate OPQULIST

                        SIMUL -> OPQUE : getOperation()
                        activate OPQUE

                        OPQUE --> SIMUL : operation
                        deactivate OPQUE

                        loop for each item in itemList witch operation is equal to operation
                            SIMUL -> OPQUE :addItemToQueue(item)
                            activate OPQUE

                            deactivate OPQUE
                        end

                    end
                deactivate SIMUL

                SIMUL --> CTRL : simulator
            deactivate SIMUL

            CTRL -> SIMUL : startSimulation()
            activate SIMUL

                loop until the all operationQueues are empty and there are no machien processing items
                    |||
                    SIMUL -> SIMUL: updateMachines()
                    activate SIMUL

                        loop for each operation int in the machinesMap
                            SIMUL -> MACHLIST : get(operation)
                            activate MACHLIST

                                MACHLIST --> SIMUL : machines : Queue<Machine>
                            deactivate MACHLIST
                            loop for each machine in the machines
                                SIMUL -> MACH : updateMachine()
                                activate MACH
                                    opt if (!available)
                                        MACH -> MACH : timeLeftToFinish--
                                        activate MACH
                                            MACH --> MACH : time
                                        deactivate MACH
                                        opt if (time <= 0)
                                            MACH -> MACH : resetMachine()
                                            activate MACH

                                            deactivate MACH

                                        end

                                    end
                                    MACH --> SIMUL : finished : boolean
                                deactivate MACH
                                    |||
                                    opt  if(finished)

                                        SIMUL -> MACH : addExecutionTimesMachine(machine, machine.getProcessingSpeed())
                                        activate MACH

                                        SIMUL -> MACH : getCurrentProcessingItem()

                                            MACH --> SIMUL : item
                                        deactivate MACH

                                        SIMUL -> ITEM : getNextOperation()
                                        activate ITEM

                                            ITEM --> SIMUL : operation
                                        deactivate ITEM
                                        SIMUL -> OPQUE : addItemToQueue(item)
                                    end

                                deactivate MACH
                            end

                    deactivate SIMUL
                        end

                    SIMUL -> SIMUL: printQueue()
                    activate SIMUL

                    deactivate SIMUL

                    SIMUL -> SIMUL: printMachineStatus()
                    activate SIMUL

                    deactivate SIMUL

                    loop for each operationQueue in the operationQueueList that doesn't is empty
                        SIMUL -> OPQULIST: getOperationQueue
                        activate OPQULIST

                            OPQULIST --> SIMUL : operationQueue
                        deactivate OPQULIST
                        SIMUL -> OPQUE : getOperation()
                        activate OPQUE

                            OPQUE --> SIMUL: operation
                        deactivate OPQUE
                        SIMUL -> MACHMAP : get(operation)
                        activate MACHMAP

                            MACHMAP --> SIMUL : machineListOP : Queue<Machine>
                        deactivate MACHMAP

                        SIMUL -> SIMUL : assignItemToMachine(operationQueue,machineListOP)
                        activate SIMUL

                        loop for each machine that's available and there is an item to be process in that machine
                            SIMUL -> MACHLIST : getMachine()
                            activate MACHLIST

                                MACHLIST --> SIMUL : machine
                            deactivate MACHLIST
                            SIMUL -> OPQUE : getNextItem()
                            activate OPQUE

                                OPQUE --> SIMUL: Item
                            deactivate OPQUE
                            SIMUL -> MACH : processItem(Item)
                            activate MACH

                                MACH -> MACH : processItem(Item)
                                activate MACH

                                    MACH -> ITEM : getCurrentOperation()
                                    activate ITEM

                                        ITEM --> MACH : processingOperation
                                    deactivate ITEM
                                    opt processingOperation != null && processingOperation.equals(this.operation)
                                        |||
                                        MACH -> MACH : setCurrentProcessingItem(Item)
                                            activate MACH

                                            deactivate MACH
                                        MACH -> MACH : setNotAvailable()
                                            activate MACH

                                            deactivate MACH

                                        MACH -> MACH : setTimeToFinish()
                                            activate MACH

                                            deactivate MACH

                                    end

                                deactivate MACH

                            deactivate MACH
                        deactivate SIMUL
                        end
                        |||
                    end

                        |||
                end
                SIMUL --> CTRL : result
            deactivate SIMUL
            CTRL --> UI: result

deactivate ADM

@enduml